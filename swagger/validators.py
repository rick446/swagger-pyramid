from .lib import order_models


def generate_formencode_validators(models):
    yield PREAMBLE
    for model in order_models(models):
        for line in generate_schema(model):
            yield line


def generate_schema(model):
    yield ''
    yield ''
    yield 'class %s(fes.Schema):' % model['id']
    for k, v in model['properties'].items():
        yield '    %s = %s' % (k, generate_validator(v))


def generate_validator(property):
    args = {}
    if not property.get('required', False):
        if property.get('default'):
            args['if_missing'] = args['if_empty'] = property['default']
        else:
            args['if_missing'] = args['if_empty'] = None
    f_args = ', '.join('%s=%r' % (k, v) for k, v in args.items())
    if property['type'] == 'string':
        if property.get('format') == 'uri':
            return 'fev.URL(require_tld=True, %s)' % f_args
        else:
            return 'fev.UnicodeString(%s)' % f_args
    elif property['type'] == 'integer':
        return 'fev.Int(%s)' % f_args
    elif property['type'] == 'boolean':
        return 'fev.OneOf([True, False], %s)' % f_args
    elif property['type'] == 'date-time':
        return 'DateTime(%s)' % f_args
    elif property['type'] == 'object':
        return 'Object(%s)' % f_args
    elif property['type'] == 'array':
        items = property['items']
        if '$ref' in items:
            item_validator = generate_validator({'type': items['$ref']})
        else:
            item_validator = generate_validator(items)
        return 'fef.ForEach(%s)' % item_validator
    else:
        return '%s()' % property['type']


PREAMBLE = '''"""This file was generated by swagger2formencode! If I were
you, I wouldn't edit it; importing and reusing will go much better for you!
"""
import formencode
from formencode import foreach as fef
from formencode import schema as fes
from formencode import validators as fev

from swagger.lib import DateTime, Object
'''
